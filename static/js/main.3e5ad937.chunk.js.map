{"version":3,"sources":["components/Login/index.js","data/employees.js","components/Dashboard/Header.js","components/Dashboard/Table.js","components/Dashboard/Add.js","components/Dashboard/Edit.js","components/Dashboard/index.js","components/App/index.js","index.js"],"names":["Login","props","state","adminEmail","adminPassword","userEnteredEmail","userEnteredPassword","handleInputChange","bind","handleLogin","propName","e","this","setState","target","value","Swal","fire","timer","onBeforeOpen","showLoading","onClose","onLoginSuccess","position","type","title","showConfirmButton","className","htmlFor","id","placeholder","onChange","onClick","Component","EMPLOYEES_DATA","firstName","lastName","email","salary","date","Header","handleAddClick","handleLogout","Table","employeesData","handleEditClick","handleDelete","i","length","formatter","Intl","NumberFormat","style","currency","minimumFractionDigits","colSpan","map","employee","key","format","Add","handleAdd","onAddSuccess","newEmployeeData","push","handleAddCancel","Edit","selectedEmployee","handleUpdate","onUpdateSuccess","indexOf","handleEditCancel","defaultValue","Dashboard","addClicked","editeClicked","filter","employeeData","splice","text","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","updatedList","cancelButtonText","onLogoutSuccess","App","isLoggedIn","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3e5ad937.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Swal from 'sweetalert2';\r\n\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      adminEmail: 'admin@example.com',\r\n      adminPassword: 'qwerty',\r\n      userEnteredEmail: null,\r\n      userEnteredPassword: null\r\n    };\r\n\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.handleLogin = this.handleLogin.bind(this);\r\n  }\r\n\r\n  handleInputChange(propName, e) {\r\n    this.setState({ [propName]: e.target.value });\r\n  }\r\n\r\n  handleLogin() {\r\n    const {\r\n      adminEmail,\r\n      adminPassword,\r\n      userEnteredEmail,\r\n      userEnteredPassword\r\n    } = this.state;\r\n\r\n    if (\r\n      userEnteredEmail === adminEmail &&\r\n      userEnteredPassword === adminPassword\r\n    ) {\r\n      Swal.fire({\r\n        timer: 1500,\r\n        onBeforeOpen: () => {\r\n          Swal.showLoading();\r\n        },\r\n        onClose: () => {\r\n          this.props.onLoginSuccess();\r\n\r\n          Swal.fire({\r\n            position: 'center',\r\n            type: 'success',\r\n            title: 'Successfully logged in',\r\n            showConfirmButton: false,\r\n            timer: 1500\r\n          });\r\n        }\r\n      });\r\n    } else {\r\n      Swal.fire({\r\n        timer: 1500,\r\n        onBeforeOpen: () => {\r\n          Swal.showLoading();\r\n        },\r\n        onClose: () => {\r\n          Swal.fire({\r\n            position: 'center',\r\n            type: 'error',\r\n            title: 'Incorrect credentials !',\r\n            showConfirmButton: true\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"small-container\">\r\n        <form>\r\n          <h1>Admin Login</h1>\r\n          <label htmlFor=\"email\">Email</label>\r\n          <input\r\n            type=\"email\"\r\n            id=\"email\"\r\n            placeholder=\"admin@example.com\"\r\n            onChange={e => this.handleInputChange('userEnteredEmail', e)}\r\n          />\r\n          <label htmlFor=\"password\">Password</label>\r\n          <input\r\n            type=\"password\"\r\n            id=\"password\"\r\n            placeholder=\"qwerty\"\r\n            onChange={e => this.handleInputChange('userEnteredPassword', e)}\r\n          />\r\n          <input\r\n            type=\"button\"\r\n            onClick={this.handleLogin}\r\n            value=\"Login\"\r\n            className=\"login-btn\"\r\n          />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","const EMPLOYEES_DATA = [\r\n  {\r\n    firstName: 'Susan',\r\n    lastName: 'Jordon',\r\n    email: 'susan@example.com',\r\n    salary: '68000',\r\n    date: '2019-02-05'\r\n  },\r\n  {\r\n    firstName: 'Clark',\r\n    lastName: 'Kent',\r\n    email: 'clark@example.com',\r\n    salary: '175000',\r\n    date: '2010-11-01'\r\n  },\r\n  {\r\n    firstName: 'Rolf',\r\n    lastName: 'Hegdal',\r\n    email: 'rolf@example.com',\r\n    salary: '130000',\r\n    date: '2010-06-15'\r\n  },\r\n  {\r\n    firstName: 'diana',\r\n    lastName: 'prince',\r\n    email: 'diana@example.com',\r\n    salary: '140000',\r\n    date: '2019-03-10'\r\n  },\r\n  {\r\n    firstName: 'Arsenio',\r\n    lastName: 'Grant',\r\n    email: 'arsenio@example.com',\r\n    salary: '68000',\r\n    date: '2017-04-18'\r\n  },\r\n  {\r\n    firstName: 'Tim',\r\n    lastName: 'Fisher',\r\n    email: 'fisher@example.com',\r\n    salary: '120000',\r\n    date: '2014-04-19'\r\n  },\r\n  {\r\n    firstName: 'Alex',\r\n    lastName: 'Smith',\r\n    email: 'alex@example.com',\r\n    salary: '87000',\r\n    date: '2012-05-07'\r\n  },\r\n  {\r\n    firstName: 'Ede',\r\n    lastName: 'Judge',\r\n    email: 'ede@example.com',\r\n    salary: '90000',\r\n    date: '2018-01-20'\r\n  },\r\n  {\r\n    firstName: 'Mark',\r\n    lastName: 'jonas',\r\n    email: 'mark@example.com',\r\n    salary: '71000',\r\n    date: '2017-08-27'\r\n  },\r\n  {\r\n    firstName: 'Bruce',\r\n    lastName: 'Wayne',\r\n    email: 'bruce@example.com',\r\n    salary: '194000',\r\n    date: '2016-07-11'\r\n  }\r\n];\r\n\r\nexport { EMPLOYEES_DATA };\r\n","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    const { handleAddClick, handleLogout } = this.props;\r\n\r\n    return (\r\n      <header>\r\n        <h1>Employees Data</h1>\r\n        <div className=\"main-btns\">\r\n          <button onClick={handleAddClick}>Add Employee</button>\r\n          <button onClick={handleLogout} className=\"logout-btn accent-button\">\r\n            Logout\r\n          </button>\r\n        </div>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\n\r\nclass Table extends Component {\r\n  render() {\r\n    const { employeesData, handleEditClick, handleDelete } = this.props;\r\n\r\n    for (let i = 0; i < employeesData.length; i++) {\r\n      employeesData[i].id = i + 1;\r\n    }\r\n\r\n    const formatter = new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'USD',\r\n      minimumFractionDigits: null\r\n    });\r\n\r\n    return (\r\n      <div className=\"contain-table\">\r\n        <table className=\"striped-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>No.</th>\r\n              <th>First Name</th>\r\n              <th>Last Name</th>\r\n              <th>Email</th>\r\n              <th>Salary</th>\r\n              <th>Date</th>\r\n              <th colSpan={2} className=\"text-center\">\r\n                Actions\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {employeesData.length > 0 ? (\r\n              employeesData.map((employee, i) => (\r\n                <tr key={employee.id}>\r\n                  <td>{i + 1}</td>\r\n                  <td>{employee.firstName}</td>\r\n                  <td>{employee.lastName}</td>\r\n                  <td>{employee.email}</td>\r\n                  <td>{formatter.format(employee.salary)}</td>\r\n                  <td>{employee.date} </td>\r\n                  <td className=\"text-right\">\r\n                    <button\r\n                      onClick={() => handleEditClick(employee.id)}\r\n                      className=\"button muted-button\"\r\n                    >\r\n                      Edit\r\n                    </button>\r\n                  </td>\r\n                  <td className=\"text-left\">\r\n                    <button\r\n                      onClick={() => handleDelete(employee.id)}\r\n                      className=\"button muted-button\"\r\n                    >\r\n                      Delete\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              ))\r\n            ) : (\r\n              <tr>\r\n                <td colSpan={7}>No Employees</td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Table;\r\n","import React, { Component } from 'react';\r\nimport Swal from 'sweetalert2';\r\n\r\nclass Add extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      firstName: null,\r\n      lastName: null,\r\n      email: null,\r\n      salary: null,\r\n      date: null\r\n    };\r\n\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.handleAdd = this.handleAdd.bind(this);\r\n  }\r\n\r\n  handleInputChange(propName, e) {\r\n    this.setState({ [propName]: e.target.value });\r\n  }\r\n\r\n  handleAdd() {\r\n    const { firstName, lastName, email, salary, date } = this.state;\r\n    const { employeesData, onAddSuccess } = this.props;\r\n\r\n    if (firstName === null) {\r\n      return Swal.fire({\r\n        position: 'center',\r\n        type: 'error',\r\n        title: 'All fields are required !',\r\n        showConfirmButton: true\r\n      });\r\n    } else if (lastName === null) {\r\n      return Swal.fire({\r\n        position: 'center',\r\n        type: 'error',\r\n        title: 'All fields are required !',\r\n        showConfirmButton: true\r\n      });\r\n    } else if (email === null) {\r\n      return Swal.fire({\r\n        position: 'center',\r\n        type: 'error',\r\n        title: 'All fields are required !',\r\n        showConfirmButton: true\r\n      });\r\n    } else if (salary === null) {\r\n      return Swal.fire({\r\n        position: 'center',\r\n        type: 'error',\r\n        title: 'All fields are required !',\r\n        showConfirmButton: true\r\n      });\r\n    } else if (date === null) {\r\n      return Swal.fire({\r\n        position: 'center',\r\n        type: 'error',\r\n        title: 'All fields are required !',\r\n        showConfirmButton: true\r\n      });\r\n    }\r\n\r\n    const id = employeesData.length + 1;\r\n    const newEmployeeData = {\r\n      id,\r\n      firstName,\r\n      lastName,\r\n      email,\r\n      salary,\r\n      date\r\n    };\r\n\r\n    employeesData.push(newEmployeeData);\r\n    onAddSuccess(employeesData);\r\n\r\n    Swal.fire({\r\n      position: 'center',\r\n      type: 'success',\r\n      title: 'New employee added',\r\n      showConfirmButton: false,\r\n      timer: 1500\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { handleAddCancel } = this.props;\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <form>\r\n          <h1>Add Employee</h1>\r\n          <label htmlFor=\"fName\">First Name</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"firstName\"\r\n            onChange={e => this.handleInputChange('firstName', e)}\r\n          />\r\n          <label htmlFor=\"lName\">Last Name</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"lastName\"\r\n            onChange={e => this.handleInputChange('lastName', e)}\r\n          />\r\n          <label htmlFor=\"email\">Email</label>\r\n          <input\r\n            type=\"email\"\r\n            id=\"email\"\r\n            onChange={e => this.handleInputChange('email', e)}\r\n          />\r\n          <label htmlFor=\"salary\">Salary ($)</label>\r\n          <input\r\n            type=\"number\"\r\n            id=\"salary\"\r\n            onChange={e => this.handleInputChange('salary', e)}\r\n          />\r\n          <label htmlFor=\"date\">Date</label>\r\n          <input\r\n            type=\"date\"\r\n            id=\"date\"\r\n            onChange={e => this.handleInputChange('date', e)}\r\n          />\r\n          <div className=\"main-btns\">\r\n            <input type=\"button\" onClick={this.handleAdd} value=\"Add\" />\r\n            <input\r\n              type=\"button\"\r\n              onClick={handleAddCancel}\r\n              value=\"Cancel\"\r\n              className=\"accent-button cancel\"\r\n            />\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Add;\r\n","import React, { Component } from 'react';\r\nimport Swal from 'sweetalert2';\r\n\r\nclass Edit extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      id: props.selectedEmployee.id,\r\n      firstName: props.selectedEmployee.firstName,\r\n      lastName: props.selectedEmployee.lastName,\r\n      email: props.selectedEmployee.email,\r\n      salary: props.selectedEmployee.salary,\r\n      date: props.selectedEmployee.date\r\n    };\r\n\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.handleUpdate = this.handleUpdate.bind(this);\r\n  }\r\n\r\n  handleInputChange(propName, e) {\r\n    this.setState({ [propName]: e.target.value });\r\n  }\r\n\r\n  handleUpdate() {\r\n    const { id, firstName, lastName, email, salary, date } = this.state;\r\n    const { onUpdateSuccess } = this.props;\r\n\r\n    if (firstName === '') {\r\n      return Swal.fire({\r\n        position: 'center',\r\n        type: 'error',\r\n        title: 'All fields are required !',\r\n        showConfirmButton: true\r\n      });\r\n    } else if (lastName === '') {\r\n      return Swal.fire({\r\n        position: 'center',\r\n        type: 'error',\r\n        title: 'All fields are required !',\r\n        showConfirmButton: true\r\n      });\r\n    } else if (email === '') {\r\n      return Swal.fire({\r\n        position: 'center',\r\n        type: 'error',\r\n        title: 'All fields are required !',\r\n        showConfirmButton: true\r\n      });\r\n    } else if (email.indexOf(' ') !== -1) {\r\n      return Swal.fire({\r\n        position: 'center',\r\n        type: 'error',\r\n        title: 'All fields are required !',\r\n        showConfirmButton: true\r\n      });\r\n    } else if (salary === '') {\r\n      return Swal.fire({\r\n        position: 'center',\r\n        type: 'error',\r\n        title: 'All fields are required !',\r\n        showConfirmButton: true\r\n      });\r\n    } else if (date === '') {\r\n      return Swal.fire({\r\n        position: 'center',\r\n        type: 'error',\r\n        title: 'All fields are required !',\r\n        showConfirmButton: true\r\n      });\r\n    }\r\n\r\n    const employeeData = {\r\n      id,\r\n      firstName,\r\n      lastName,\r\n      email,\r\n      salary,\r\n      date\r\n    };\r\n\r\n    onUpdateSuccess(id, employeeData);\r\n  }\r\n\r\n  render() {\r\n    const { firstName, lastName, email, salary, date } = this.state;\r\n    const { handleEditCancel } = this.props;\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <form>\r\n          <h1>Edit Employee Data</h1>\r\n          <label htmlFor=\"fName\">First Name</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"firstName\"\r\n            defaultValue={firstName}\r\n            onChange={e => this.handleInputChange('firstName', e)}\r\n          />\r\n          <label htmlFor=\"lName\">Last Name</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"lastName\"\r\n            defaultValue={lastName}\r\n            onChange={e => this.handleInputChange('lastName', e)}\r\n          />\r\n          <label htmlFor=\"email\">Email</label>\r\n          <input\r\n            type=\"email\"\r\n            id=\"email\"\r\n            defaultValue={email}\r\n            onChange={e => this.handleInputChange('email', e)}\r\n          />\r\n          <label htmlFor=\"salary\">Salary ($)</label>\r\n          <input\r\n            type=\"number\"\r\n            id=\"salary\"\r\n            defaultValue={salary}\r\n            onChange={e => this.handleInputChange('salary', e)}\r\n          />\r\n          <label htmlFor=\"date\">Date</label>\r\n          <input\r\n            type=\"date\"\r\n            id=\"date\"\r\n            defaultValue={date}\r\n            onChange={e => this.handleInputChange('date', e)}\r\n          />\r\n          <div className=\"main-btns\">\r\n            <input type=\"button\" onClick={this.handleUpdate} value=\"Update\" />\r\n            <input\r\n              type=\"button\"\r\n              onClick={handleEditCancel}\r\n              value=\"Cancel\"\r\n              className=\"accent-button cancel\"\r\n            />\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Edit;\r\n","import React, { Component } from 'react';\r\nimport Swal from 'sweetalert2';\r\nimport { EMPLOYEES_DATA } from '../../data/employees';\r\n\r\nimport Header from './Header';\r\nimport Table from './Table';\r\nimport Add from './Add';\r\nimport Edit from './Edit';\r\n\r\nclass Dashboard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      employeesData: EMPLOYEES_DATA,\r\n      addClicked: false,\r\n      editeClicked: false,\r\n      selectedEmployee: null\r\n    };\r\n\r\n    this.handleAddClick = this.handleAddClick.bind(this);\r\n    this.handleEditClick = this.handleEditClick.bind(this);\r\n    this.handleAddCancel = this.handleAddCancel.bind(this);\r\n    this.handleEditCancel = this.handleEditCancel.bind(this);\r\n    this.onAddSuccess = this.onAddSuccess.bind(this);\r\n    this.onUpdateSuccess = this.onUpdateSuccess.bind(this);\r\n    this.handleDelete = this.handleDelete.bind(this);\r\n    this.handleLogout = this.handleLogout.bind(this);\r\n  }\r\n\r\n  handleAddClick() {\r\n    this.setState({ addClicked: true });\r\n  }\r\n\r\n  handleEditClick(id) {\r\n    const result = this.state.employeesData.filter(\r\n      employee => employee.id === id\r\n    );\r\n\r\n    const employee = result[0];\r\n    this.setState({ editeClicked: true, selectedEmployee: employee });\r\n  }\r\n\r\n  handleAddCancel() {\r\n    this.setState({ addClicked: false });\r\n  }\r\n\r\n  handleEditCancel() {\r\n    this.setState({ editeClicked: false });\r\n  }\r\n\r\n  onAddSuccess(employeesData) {\r\n    this.setState({ employeesData, addClicked: false });\r\n  }\r\n\r\n  onUpdateSuccess(id, employeeData) {\r\n    const { employeesData } = this.state;\r\n\r\n    employeesData.map((employee, i) => {\r\n      id === employee.id\r\n        ? employeesData.splice(i, 1, employeeData)\r\n        : Swal.fire({\r\n            type: 'error',\r\n            title: 'Oops...',\r\n            text: 'Something went wrong!'\r\n          });\r\n      return false;\r\n    });\r\n    this.setState({\r\n      employeesData,\r\n      editeClicked: false\r\n    });\r\n    Swal.fire({\r\n      position: 'center',\r\n      type: 'success',\r\n      title: `${employeeData.firstName} ${employeeData.lastName} data updated.`,\r\n      showConfirmButton: false,\r\n      timer: 1500\r\n    });\r\n\r\n    // console.log(this.state.employeesData);\r\n  }\r\n\r\n  handleDelete(id) {\r\n    const { employeesData } = this.state;\r\n\r\n    Swal.fire({\r\n      title: 'Are you sure?',\r\n      text: \"You won't be able to revert this!\",\r\n      type: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Yes, delete it!'\r\n    }).then(result => {\r\n      if (result.value) {\r\n        const result = employeesData.filter(employee => employee.id === id);\r\n        const employee = result[0];\r\n\r\n        Swal.fire({\r\n          position: 'center',\r\n          type: 'success',\r\n          title: 'Deleted!',\r\n          text: `${employee.firstName} ${employee.lastName} has been deleted.`,\r\n          showConfirmButton: false,\r\n          timer: 1500\r\n        });\r\n\r\n        const updatedList = employeesData.filter(\r\n          employee => employee.id !== id\r\n        );\r\n\r\n        // console.log(updatedList);\r\n        this.setState({ employeesData: updatedList });\r\n      }\r\n    });\r\n  }\r\n\r\n  handleLogout() {\r\n    Swal.fire({\r\n      title: 'Are you sure?',\r\n      type: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#d33',\r\n      cancelButtonColor: '#3085d6',\r\n      confirmButtonText: 'Yes, log me out!',\r\n      cancelButtonText: 'No, keep me in'\r\n    }).then(result => {\r\n      if (result.value) {\r\n        Swal.fire({\r\n          timer: 1500,\r\n          onBeforeOpen: () => {\r\n            Swal.showLoading();\r\n          },\r\n          onClose: () => {\r\n            this.props.onLogoutSuccess();\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      employeesData,\r\n      addClicked,\r\n      editeClicked,\r\n      selectedEmployee\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        {!addClicked && !editeClicked && (\r\n          <Header\r\n            handleAddClick={this.handleAddClick}\r\n            handleLogout={this.handleLogout}\r\n          />\r\n        )}\r\n        {!addClicked && !editeClicked && (\r\n          <Table\r\n            employeesData={employeesData}\r\n            handleEditClick={this.handleEditClick}\r\n            handleDelete={this.handleDelete}\r\n          />\r\n        )}\r\n        {addClicked && (\r\n          <Add\r\n            employeesData={employeesData}\r\n            onAddSuccess={this.onAddSuccess}\r\n            handleAddCancel={this.handleAddCancel}\r\n          />\r\n        )}\r\n        {editeClicked && (\r\n          <Edit\r\n            selectedEmployee={selectedEmployee}\r\n            onUpdateSuccess={this.onUpdateSuccess}\r\n            handleEditCancel={this.handleEditCancel}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dashboard;\r\n","import React, { Component } from 'react';\r\nimport './style.css';\r\n\r\nimport Login from '../Login';\r\nimport Dashboard from '../Dashboard';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isLoggedIn: false\r\n    };\r\n\r\n    this.onLoginSuccess = this.onLoginSuccess.bind(this);\r\n    this.onLogoutSuccess = this.onLogoutSuccess.bind(this);\r\n  }\r\n\r\n  onLoginSuccess() {\r\n    this.setState({ isLoggedIn: true });\r\n  }\r\n\r\n  onLogoutSuccess() {\r\n    this.setState({ isLoggedIn: false });\r\n  }\r\n\r\n  render() {\r\n    const { isLoggedIn } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        {!isLoggedIn && <Login onLoginSuccess={this.onLoginSuccess} />}\r\n        {isLoggedIn && <Dashboard onLogoutSuccess={this.onLogoutSuccess} />}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}